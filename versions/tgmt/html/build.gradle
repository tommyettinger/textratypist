
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.gretty:gretty:3.1.5"
	}
}
apply plugin: "gwt"
apply plugin: "war"
apply plugin: "org.gretty"

gwt {
	gwtVersion = "$gwtFrameworkVersion" // Should match the version used for building the GWT backend. See gradle.properties.
	maxHeapSize = '1G' // Default 256m is not enough for the GWT compiler. GWT is HUNGRY.
	minHeapSize = '1G'

	src = files(file('src/main/java')) // Needs to be in front of "modules" below.
	modules 'com.ray3k.tgmt.GdxDefinition'
	devModules 'com.ray3k.tgmt.GdxDefinitionSuperdev'
	project.webAppDirName = 'webapp'

	compiler.strict = true
	compiler.disableCastChecking = true
	compiler.style = org.docstr.gradle.plugins.gwt.Style.DETAILED
	sourceLevel = 1.11
}

dependencies {
	implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
	implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
	implementation "com.google.jsinterop:jsinterop-annotations:2.0.2:sources"
	implementation project(':core')
	implementation "com.github.tommyettinger:textratypist:$textratypistVersion:sources"
	implementation "com.github.tommyettinger:regexodus:0.1.19:sources"
	api 'com.github.raeleus.TenPatch:tenpatch:5.2.3:sources'
	api "com.github.intrigus.gdx-freetype-gwt:gdx-freetype-gwt:1.9.10.1"
	api "com.github.intrigus.gdx-freetype-gwt:gdx-freetype-gwt:1.9.10.1:sources"
	implementation 'com.github.raeleus.stripe:stripe:2.0.0:sources'
}

import org.akhikhl.gretty.AppBeforeIntegrationTestTask
import org.docstr.gradle.plugins.gwt.GwtSuperDev

gretty.httpPort = 8080
// The line below will need to be changed only if you change the build directory to something other than "build".
gretty.resourceBase = "${project.layout.buildDirectory.asFile.get().absolutePath}/gwt/draftOut"
gretty.contextPath = "/"
gretty.portPropertiesFileName = "TEMP_PORTS.properties"

tasks.register('startHttpServer') {
	dependsOn("draftCompileGwt")
	doFirst {
		copy {
			from "webapp"
			into gretty.resourceBase
		}
		copy {
			from "war"
			into gretty.resourceBase
		}
	}
}

tasks.register('beforeRun', AppBeforeIntegrationTestTask) {
	dependsOn("startHttpServer")
	gretty {
		integrationTestTask("superDev")
	}
	// The next line allows ports to be reused instead of
	// needing a process to be manually terminated.
	file("build/TEMP_PORTS.properties").delete()
	interactive = false
}

tasks.register('superDev', GwtSuperDev) {
	group("gwt")
	dependsOn("beforeRun")
	doFirst {
		gwt.modules = gwt.devModules
	}
}

//// We delete the (temporary) war/ folder because if any extra files get into it, problems occur.
//// The war/ folder shouldn't be committed to version control.
clean.delete += [file("war")]

// This next line can be changed if you want to, for instance, always build into the
// docs/ folder of a Git repo, which can be set to automatically publish on GitHub Pages.
// This is relative to the html/ folder.
var outputPath = "build/dist/"

tasks.register('dist') {
	dependsOn(["clean", "compileGwt"])
	doLast {
		// Uncomment the next line if you have changed outputPath and know that its contents
		// should be replaced by a new dist build. Some large JS files are not cleaned up by
		// default unless the outputPath is inside build/ (then the clean task removes them).
		// Do not uncomment the next line if you changed outputPath to a folder that has
		// non-generated files that you want to keep!
		//delete(file(outputPath))

		file(outputPath).mkdirs()
		copy {
			from("build/gwt/out") {
				exclude '**/*.symbolMap' // Not used by a dist, and these can be large.
			}
			into outputPath
		}
		copy {
			from("webapp") {
				exclude 'index.html' // We edit this HTML file later.
				exclude 'refresh.png' // We don't need this button; this saves some bytes.
			}
			into outputPath
		}
		copy {
			from("webapp") {
				// These next two lines take the index.html page and remove the superdev refresh button.
				include 'index.html'
				filter { String line -> line.replaceAll('<a class="superdev" .+', '') }
				// This does not modify the original index.html, only the copy in the dist.
				// If you decide to manually remove or comment out the superdev button from index.html, you should also
				// either remove or comment out only the "filter" line above this.
			}
			into outputPath
		}
		copy {
			from "war"
			into outputPath
		}
	}
}

tasks.register('addSource') {
	doLast {
		sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)
		sourceSets.main.compileClasspath += files("../core/build/generated/sources/annotationProcessor/java/main")
		sourceSets.main.compileClasspath += files(sourceSets.main.output.resourcesDir)

	}
}

tasks.register("distZip", Zip) {
	dependsOn("dist")
	//// This uses the output of the dist task, which removes the superdev button from index.html .
	from(outputPath)
	archiveVersion = projectVersion
	archiveBaseName.set("${appName}-dist")
	//// The result will be in html/build/ with a name containing "-dist".
	destinationDirectory.set(file("build"))
}

tasks.compileGwt.dependsOn("addSource")
tasks.draftCompileGwt.dependsOn("addSource")
tasks.checkGwt.dependsOn("addSource")

java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11
sourceSets.main.java.srcDirs = [ "src/main/java/" ]

eclipse.project.name = appName + "-html"
